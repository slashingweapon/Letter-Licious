README

This project implements a program for making words out of
collections of letters.  I wrote it because my better half (she
knows who she is) likes to play Words With Friends, and insists I
play too.  But I suck at it, unless I occasionally use a web site
that tells me what words I can make.

Enter the problem: the web sites I've found all suck for use on
mobile.  So I intend to make something really focused just on
what I need, nicely presented on mobile platforms.

For a database I'm using Postgres, because it supports a
combination of data types and indexing that is fabulously
well-suited to the task at hand.

DATA DESCRIPTION

We pull our list of words from TWL06 word list, and keep them in
all-caps format.  Word searches are capitalized before they are
performed.  Here is the table schema:

	create table words (
		len smallint NOT NULL,
		sortLetters char(15) NOT NULL,
		letters char(2)[],
		word char(15) NOT NULL
	);
	create index by_sortedLetters on words using BTREE (sortLetters);
	create index by_letters on words using GIN (letters);

A word is broken up into an array of letters, which are sorted. 
The sorted letters become the sortLetters field.  It turns out
I'm not using that field, but I still may in the future.  I then
take the same letters and append them with counts, and save them
in the 'letters' array field.  For example, AARDVARK is saved as:

	len: 8
	sortLetters: AAADKRRV
	letters: {'A0','A1','A2','D0','K0','R0','R1','V0'}
	word: AARDVARK
	
When it comes time to check what words you can make with the
letters KRADRAAV, the same letter analysis is performed, and the
following query is issued:

	select * from words where letters <@ '{A0,A1,A2,D0,K0,R0,R1,V0}';

The response comes in easily under a second:
 len |   sortletters   |          letters          |      word       
-----+-----------------+---------------------------+-----------------
   2 | AA              | {A0,A1}                   | AA             
   8 | AAADKRRV        | {A0,A1,A2,D0,K0,R0,R1,V0} | AARDVARK       
   2 | AD              | {A0,D0}                   | AD             
   2 | AR              | {A0,R0}                   | AR             
   4 | AAKR            | {A0,A1,K0,R0}             | ARAK           
   3 | AKR             | {A0,K0,R0}                | ARK            
   3 | AAV             | {A0,A1,V0}                | AVA            
   3 | ADK             | {A0,D0,K0}                | DAK            
   4 | ADKR            | {A0,D0,K0,R0}             | DARK           
   2 | AK              | {A0,K0}                   | KA             
   4 | AAKV            | {A0,A1,K0,V0}             | KAVA           
   3 | ADR             | {A0,D0,R0}                | RAD            
   5 | AADRR           | {A0,A1,D0,R0,R1}          | RADAR          
   3 | ARV             | {A0,R0,V0}                | VAR            
   4 | AARV            | {A0,A1,R0,V0}             | VARA           

FRAMEWORK README

This is a CodeIgniter project template which I use as a starting
point for my contracting practice.  It is a standard CI project,
with a few useful additions.

* The support folder is added to your include path.  This is
handy for situations where you don't have access to your server's
global PHP include dirs, and you want to use some third-party
libraries.  Put them here.

* application/library/Smarty.php gives you a trivially simple way
to integrate Smarty into your application.  See the headerdoc in
that file for more information.

* application/library/Fmp.php integrates the FileMaker database
libraries with your project.  See the headerdoc in that file for
more information.

* application/library/MY_Session.php overrides the default CI
session handling and replaces it with standard PHP sessions,
nicely wrapped up in CI goodness.  See the headerdoc for details.

* public/index.php has been modified to support an ENVIRONMENT
constant defined by the server.

* public/index.php includes FileMaker.php

REQUIREMENTS

system:  You will need to put your CodeIgniter_2.0.2/system
folder into this this one, and call it "system".

Smarty 3.x: The Smarty folder has to be somewhere in your PHP
include path.

FileMaker PHP libraries need to be in your PHP include path if
you plan on using FileMaker.

Apache's ModRewrite must be installed and enabled.

FILE PERMISSIONS

As always, the entire directory needs to be recursively readable
by the web server.  Additionally, the tmp directory needs to be
recursively writable by the web server too.  This is where smarty
will keep its compiled templates and caches, and where session
data files will be stored.

I have added a convenient command-line-tool controller that will
let you set the file permissions properly.  You will need sudo
access, of course.

From the public directory, enter the following command.  'owner'
should be the username or id of the owner of the files, and
'webgroup' should be the group ID that the web server runs as
(_www on MacOS X, www-data on many linux systems)

	sudo php index.php tool setFilePermissions owner webgroup

APACHE CONFIGURATION

The virtual host should point into the public directory, and
include rewrite rules that map any unknown files to index.php.

You can use APPLICATION_ENV to control which kind of environment
you're working in, and thus which configurations to use.  The
usual values are 'production', 'staging', and 'development'.  I
often find it is useful to install with APPLICATION_ENV initially
set to 'development' so I can see the PHP errors while I'm
shaking down an installation, and then change it to 'production'
after everything is running.


<VirtualHost *:80>
	DocumentRoot "/home/slashingweapon/letterlicious/public"
	ServerName letters
	
	SetEnv APPLICATION_ENV production
	
	<Directory /home/slashingweapon/letterlicious/public>
		Options FollowSymLinks SymLinksIfOwnerMatch
		DirectoryIndex index.html index.php
		AllowOverride All
		Order allow,deny
		Allow from all
		
		RewriteEngine On
		RewriteBase /
		RewriteCond %{REQUEST_FILENAME} !-f
		RewriteCond %{REQUEST_FILENAME} !-d
		RewriteRule ^(.*)$ index.php?/$1 [L]
	</Directory>
</VirtualHost>

Don't forget to restart Apache after you've added the vhost
configuration.

ARCHIVING

	git archive --format=zip --prefix=project/ HEAD > project.zip
